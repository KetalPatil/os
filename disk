**fcfs**
// C++ program to demonstrate
// FCFS Disk Scheduling algorithm
#include <stdio.h>
#include <math.h>

int size = 8;

void FCFS(int arr[],int head)
{
	int seek_count = 0;
	int cur_track, distance;

	for(int i=0;i<size;i++)
	{
		cur_track = arr[i];
	
		// calculate absolute distance
		distance = fabs(head - cur_track);
	
		// increase the total count
		seek_count += distance;
	
		// accessed track is now new head
		head = cur_track;
	}

	printf("Total number of seek operations: %d\n",seek_count);
	
	// Seek sequence would be the same
	// as request array sequence
	printf("Seek Sequence is\n");

	for (int i = 0; i < size; i++) {
		printf("%d\n",arr[i]);
	}
}

//Driver code
int main()
{
	// request array
	int arr[8] = { 176, 79, 34, 60, 92, 11, 41, 114 };
	int head = 50;
	
	FCFS(arr,head);

	return 0;
}

**sstf**
// C++ program for implementation of 
// SSTF disk scheduling
#include <bits/stdc++.h>
using namespace std;

// Calculates difference of each 
// track number with the head position 
void calculatedifference(int request[], int head,
						int diff[][2], int n)
{
	for(int i = 0; i < n; i++)
	{
		diff[i][0] = abs(head - request[i]);
	}
}

// Find unaccessed track which is 
// at minimum distance from head 
int findMIN(int diff[][2], int n)
{
	int index = -1;
	int minimum = 1e9;

	for(int i = 0; i < n; i++)
	{
		if (!diff[i][1] && minimum > diff[i][0])
		{
			minimum = diff[i][0];
			index = i;
		}
	}
	return index;
}

void shortestSeekTimeFirst(int request[], 
						int head, int n)
{
	if (n == 0)
	{
		return;
	}
	
	// Create array of objects of class node 
	int diff[n][2] = { { 0, 0 } };
	
	// Count total number of seek operation 
	int seekcount = 0;
	
	// Stores sequence in which disk access is done 
	int seeksequence[n + 1] = {0};
	
	for(int i = 0; i < n; i++)
	{
		seeksequence[i] = head;
		calculatedifference(request, head, diff, n);
		int index = findMIN(diff, n);
		diff[index][1] = 1;
		
		// Increase the total count 
		seekcount += diff[index][0]; 
		
		// Accessed track is now new head 
		head = request[index];
	}
	seeksequence[n] = head;
	
	cout << "Total number of seek operations = "
		<< seekcount << endl;
	cout << "Seek sequence is : " << "\n";
	
	// Print the sequence 
	for(int i = 0; i <= n; i++) 
	{
		cout << seeksequence[i] << "\n";
	}
}

// Driver code
int main()
{
	int n = 8;
	int proc[n] = { 176, 79, 34, 60, 92, 11, 41, 114 };
	
	shortestSeekTimeFirst(proc, 50, n);
	
	return 0;
}

**scan**
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define size 10
#define disk_size 200
int comp(const void * l, const void * n) {
   return (*(int*)l - *(int*)n);
}
void SCAN(int arr[], int head, char* dn){
   int seek_num = 0;
   int dt, cur_track;
   int leftside[size], rightside[size];
   int seek_seq[size + 3];
   int m_scan = 0, s_scan = 0;
   if (strcmp(dn, "leftside") == 0)
      leftside[m_scan++] = 0;
   else if (strcmp(dn, "rightside") == 0)
      rightside[s_scan++] = disk_size - 1;
   for (int p_s = 0; p_s < size; p_s++) {
      if (arr[p_s] < head)
         leftside[m_scan++] = arr[p_s];
      if (arr[p_s] > head)
         rightside[s_scan++] = arr[p_s];
   }
   qsort(leftside, m_scan, sizeof(int), comp);
   qsort(rightside, s_scan, sizeof(int), comp);
   int go = 2;
   int ind = 0;
   while (go--) {
      if (strcmp(dn, "leftside") == 0) {
         for (int p_s = m_scan - 1; p_s >= 0; p_s--) {
            cur_track = leftside[p_s];
            seek_seq[ind++] = cur_track;
            dt = abs(cur_track - head);
            seek_num += dt;
            head = cur_track;
        }
        dn = "rightside";
      }
      else if (strcmp(dn, "rightside") == 0) {
         for (int p_s = 0; p_s < s_scan; p_s++) {
            cur_track = rightside[p_s];
            seek_seq[ind++] = cur_track;
            dt = abs(cur_track - head);
            seek_num += dt;
            head = cur_track;
         }
         dn = "leftside";
      }
   }
   printf("Num of seek process = %d", seek_num);
   printf("Sequence is");
   for (int p_s = 0; p_s < ind; p_s++) {
      printf("%d", seek_seq[p_s]);
   }
}
int main(){
   int arr[size] = { 126, 90, 14, 50, 25, 42, 51, 78, 102, 100 };
   int head = 42;
   char dn[] = "leftside";
   SCAN(arr, head, dn);
   return 0;
}

**cscan**
**look**
